@page "/about"

<style>
    #main-page {
        background: #fff;
    }
    .content.container-fluid {
        height: 100vh;
        overflow-y: auto;
        overflow-x: hidden;
    }

    /*skeleton*/
    .about-descrip-skeleton {
        line-height: 20px;
        margin-top: 26px;
    }

    .about-heading-skeleton{
            margin-top: 1%;
            padding: 0;
    }

    .about-component-skeleton{
        width: 92%;
        margin-left: 15px;
    }
</style>

@if (isDataLoaded)
{
<div>
    <div class='about-heading'>About this sample</div>
    <div class='about-description'>
        This expense tracker demo application showcases how several Syncfusion Blazor components can be used in a real-world application scenario. You can check the source code of this application and use it as a reference for integrating Syncfusion Blazor components into your applications.
    </div>
    <div class='list-heading'>List of Blazor components used in this sample</div>
    <div class='about-component'>
        <div class='control-item'>
            <span class="icon-button sf-sb-icon control-icon"></span>
            <a class='control-name' href="https://blazor.syncfusion.com/documentation/button/getting-started/" target="_blank">Button</a>
        </div>
        <div class='control-item'>
            <span class="icon-chart sf-sb-icon control-icon"></span>
            <a class='control-name' href="https://blazor.syncfusion.com/documentation/chart/getting-started/" target="_blank">Chart</a>
        </div>
        <div class='control-item'>
            <span class="icon-checkbox sf-sb-icon control-icon"></span>
            <a class='control-name' href="https://blazor.syncfusion.com/documentation/check-box/getting-started/" target="_blank">CheckBox</a>
        </div>
        <div class='control-item'>
            <span class="icon-datepicker sf-sb-icon control-icon"></span>
            <a class='control-name' href="https://blazor.syncfusion.com/documentation/datepicker/getting-started/" target="_blank">DatePicker</a>
        </div>
        <div class='control-item'>
            <span class="icon-timepicker sf-sb-icon control-icon"></span>
            <a class='control-name' href="https://blazor.syncfusion.com/documentation/timepicker/getting-started/" target="_blank">TimePicker</a>
        </div>
        <div class='control-item'>
            <span class="icon-daterangepicker sf-sb-icon control-icon"></span>
            <a class='control-name' href="https://blazor.syncfusion.com/documentation/daterangepicker/getting-started/" target="_blank">DateRangePicker</a>
        </div>
        <div class='control-item'>
            <span class="icon-dialog sf-sb-icon control-icon"></span>
            <a class='control-name' href="https://blazor.syncfusion.com/documentation/dialog/getting-started/" target="_blank">Dialog</a>
        </div>
        <div class='control-item'>
            <span class="icon-dropdownlist sf-sb-icon control-icon"></span>
            <a class='control-name' href="https://blazor.syncfusion.com/documentation/dropdownlist/getting-started/?" target="_blank">DropDownList</a>
        </div>
        <div class='control-item'>
            <span class="icon-grid sf-sb-icon control-icon"></span>
            <a class='control-name' href="https://blazor.syncfusion.com/documentation/grid/getting-started/" target="_blank">Grid</a>
        </div>
        <div class='control-item'>
            <span class="icon-multiselect sf-sb-icon control-icon"></span>
            <a class='control-name' href="https://blazor.syncfusion.com/documentation/multiselect/getting-started/" target="_blank">MultiSelect</a>
        </div>
        <div class='control-item'>
            <span class="icon-numerictextbox sf-sb-icon control-icon"></span>
            <a class='control-name' href="https://blazor.syncfusion.com/documentation/numerictextbox/getting-started/" target="_blank">NumericTextBox</a>
        </div>
        <div class='control-item'>
            <span class="icon-radiobutton sf-sb-icon control-icon"></span>
            <a class='control-name' href="http://blazor.syncfusion.com/documentation/radio-button/getting-started/" target="_blank">RadioButton</a>
        </div>
        <div class='control-item'>
            <span class="icon-sidebar sf-sb-icon control-icon"></span>
            <a class='control-name' href="https://blazor.syncfusion.com/documentation/sidebar/getting-started/" target="_blank">Sidebar</a>
        </div>
        <div class='control-item'>
            <span class="icon-textboxes sf-sb-icon control-icon"></span>
            <a class='control-name' href="https://blazor.syncfusion.com/documentation/textbox/getting-started/" target="_blank">TextBox</a>
        </div>
        <div class='control-item'>
            <span class="icon-skeleton sf-sb-icon control-icon"></span>
            <a class='control-name' href="https://blazor.syncfusion.com/documentation/skeleton/getting-started" target="_blank">Skeleton</a>
        </div>
        <div class='control-item'>
            <span class="icon-appbar sf-sb-icon control-icon"></span>
            <a class='control-name' href="https://blazor.syncfusion.com/documentation/appbar/getting-started" target="_blank">AppBar</a>
        </div>
        <div class='control-item'>
            <span class="icon-predefineddialogs sf-sb-icon control-icon"></span>
            <a class='control-name' href="https://blazor.syncfusion.com/documentation/dialog/predefined-dialogs" target="_blank">Predefined Dialogs</a>
        </div>
        <div class='control-item'>
            <span class="icon-message sf-sb-icon control-icon"></span>
            <a class='control-name' href="https://blazor.syncfusion.com/documentation/message/getting-started" target="_blank">Message</a>
        </div>
    </div>
</div>
}
else
{
    <div class="about-heading-skeleton">
        <SfSkeleton Shape="Syncfusion.Blazor.Notifications.SkeletonType.Rectangle" Height="15px" Width="20%"></SfSkeleton>
        <br />
    </div>
    <div class="about-descrip-skeleton">
        <SfSkeleton Shape="Syncfusion.Blazor.Notifications.SkeletonType.Rectangle" Height="15px" Width="97%"></SfSkeleton>
        <br />
        <SfSkeleton Shape="Syncfusion.Blazor.Notifications.SkeletonType.Rectangle" Height="15px" Width="74%"></SfSkeleton>
    </div>
    <br />
    <SfSkeleton Shape="Syncfusion.Blazor.Notifications.SkeletonType.Rectangle" Height="15px" Width="60%"></SfSkeleton>
    <br />
    <br />
    <div class="about-component-skeleton">
        @for (int i = 0; i < 14; i++)
        {
            <div class="control-item">
                <span>
                    <SfSkeleton Shape="Syncfusion.Blazor.Notifications.SkeletonType.Rectangle" Height="15px" Width="75%"></SfSkeleton>
                </span>
            </div>
        }
    </div>
}

@code{
    [CascadingParameter]
    public ExpenseDataService ExpenseDataService { get; set; }

    private bool isDataLoaded;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        int incomeRS = 0;
        int expenseRS = 0;
        List<ExpenseData> incomeD = new List<ExpenseData>();
        List<ExpenseData> expenseD = new List<ExpenseData>();
        DateTime start = ExpenseDataService.StartDate; DateTime end = ExpenseDataService.EndDate;
        var commonData = ExpenseDataService.CurrentExpenseData == null ? ExpenseDataService.ExpenseData.Where(s => s.DateTime >= ExpenseDataService.StartDate && s.DateTime <= ExpenseDataService.EndDate) :
            ExpenseDataService.CurrentExpenseData;
        incomeD = commonData.Where(s => s.TransactionType == "Income").ToList();
        incomeRS = incomeD.Sum(s => Convert.ToInt32(s.Amount));
        expenseD = commonData.Where(s => s.TransactionType == "Expense").ToList();
        expenseRS = expenseD.Sum(s => Convert.ToInt32(s.Amount));
        var totalBalance = CommonService.GetCurrencyVal(incomeRS - expenseRS);
        ExpenseDataService.UpdateCurrentBalance(totalBalance);
    }

    private async void LoadData()
    {
        await Task.Delay(500);
        isDataLoaded = true;
        StateHasChanged();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            LoadData();
        }
    }
}
